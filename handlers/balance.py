from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import asyncio
router = Router()

# –®–∞–≥ 1: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@router.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def choose_topup_amount(message: types.Message):
    await message.answer_sticker("CAACAgEAAxkBAAEP9JJoUu4YIoE_gpbfCX2RykWP0SfseAACfQIAAt8Z2EZFq0nDcXOtczYE")
    await asyncio.sleep(0.3)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="250", callback_data="amount_250"),
            InlineKeyboardButton(text="500", callback_data="amount_500"),
            InlineKeyboardButton(text="1000", callback_data="amount_1000"),
            InlineKeyboardButton(text="2000", callback_data="amount_2000")
        ],
        [
            InlineKeyboardButton(text="3000", callback_data="amount_3000"),
            InlineKeyboardButton(text="4000", callback_data="amount_4000"),
            InlineKeyboardButton(text="5000", callback_data="amount_5000")
        ],
        [
            InlineKeyboardButton(text="10000", callback_data="amount_10000"),
            InlineKeyboardButton(text="15000", callback_data="amount_15000"),
            InlineKeyboardButton(text="20000", callback_data="amount_20000")
        ],
        [InlineKeyboardButton(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="amount_custom")]
    ])

    await message.answer(
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

# –®–∞–≥ 2: –í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("amount_"))
async def show_payment_methods(callback: types.CallbackQuery):
    amount = callback.data.split("_")[1]

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ö–∞—Ä—Ç–æ–π/–°–ü–ë", callback_data=f"pay_card_{amount}")],
        [InlineKeyboardButton(text="üí∞ CryptoBot", callback_data=f"pay_crypto_{amount}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_amount")]
    ])

    await callback.message.edit_text(
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await callback.answer()

# –®–∞–≥ 3: –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
@router.callback_query(F.data.startswith("pay_"))
async def show_payment_info(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    method = parts[1]
    amount = parts[2]

    expire_time = datetime.now() + timedelta(minutes=20)
    formatted_time = expire_time.strftime("%d.%m.%Y %H:%M (–ú–°–ö)")

    method_text = "–ö–∞—Ä—Ç–æ–π/–°–ü–ë" if method == "card" else "CryptoBot"

    await callback.message.edit_text(
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
        f"‚ÑπÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ —É—á—ë—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. "
        f"–ú—ã –¥–µ–ª–∏–º —ç—Ç—É –∫–æ–º–∏—Å—Å–∏—é —Å –≤–∞–º–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è –≤–∞—Å –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å.\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 20 –º–∏–Ω—É—Ç\n"
        f"<b>–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ:</b> {formatted_time}\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{method_text}</b>",
        parse_mode="HTML"
    )
    await callback.answer()

# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
@router.callback_query(F.data == "back_to_amount")
async def back_to_amount(callback: types.CallbackQuery):
    await choose_topup_amount(callback.message)
    await callback.answer()
